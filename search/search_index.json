{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pr\u00e1ctica 2-4. Balanceo de carga Para realizar esta tarea es necesario clonar la MV que funciona como servidor web. De esta manera, tendremos dos servidores web y un servidor que funciona como proxy inverso y balanceador de carga. Un recordatorio de las IPs que se est\u00e1n utilizando en cada m\u00e1quina: Anfitriona: 192.168.0.13 Servidor web 1: 192.168.0.20 Servidor web 2: 192.168.0.21 Servidor proxy: 192.168.0.22 Configuraci\u00f3n del primer servidor web Ser\u00e1 necesario cambiar el nombre del directorio que contiene los archivos del servidor web a webserver1. Lo mismo con el archivo de configuraci\u00f3n y con el enlace simb\u00f3lico, en los directorios /etc/nginx/sites-available y /etc/nginx/sites-enabled. Adem\u00e1s, se le a\u00f1ade una cabecera al archivo de configuraci\u00f3n. En mi caso: location /{ add-header Serv_Web1_PerezBernabeuAlberto \"Servidor Web 1\"; } Tambi\u00e9n he modificado el contenido del HTML del servidor, para que muestre: <html> <head> <title> Prueba de balanceo con NGINX</title> </head> <body> <h2>Este es el servidor web 1</h2> </body> </html> Configuraci\u00f3n del segundo servidor web La configuraci\u00f3n del segundo servidor es la misma que la del primer servidor web, cambiando \"webserver1\" por \"webserver2\" en los lugares que es necesario. Configuraci\u00f3n del servidor proxy inverso En el servidor proxy inverso, para configurar el balanceo de carga, modificamos el archivo de configuraci\u00f3n de /etc/nginx/sites-available/ de la siguiente manera: upstream backend_hosts { random; server 192.168.0.20:8080; server 192.168.0.21:8080; } server { listen 80; listen [::]:80; server_name webserver www.webserver.com; location / { proxy_pass http://backend_hosts; # add_header Host proxy_inverso_albertoperez; } } As\u00ed, cuando desde la m\u00e1quina anfitriona busquemos 192.168.0.22:80 (o la IP correspondiente al servidor o el nombre que le hayamos dado desde el archivo /etc/hosts de la anfitriona) recibiremos realmente el contenido de uno de los servidores web, en este caso, aleatoriamente. Podemos observar que en ambos casos, efectivamente, se ha buscado la IP del servidor proxy, pero en un caso se ha devuelto el contenido del servidor web 1 y su cabecera correspondiente y en el otro caso se ha devuelto el contenido del servidor web 2 y su cabecera correspondiente. Si paramos el servicio de Nginx en uno de los servidores web, s\u00f3lo se mostrar\u00e1 el contenido del otro servidor. Lo mismo ocurrir\u00e1 si por una causa ajena uno de los servidores web cae o es inutilizado. Apunte sobre soluci\u00f3n de problemas Al trabajar con varias m\u00e1quinas al mismo tiempo, hay que tener en cuenta que existen muchos errores que pueden ocurrir y es necesario saber c\u00f3mo diagnosticar qu\u00e9 est\u00e1 fallando cuando no obtememos el resultado que esperamos. En mi caso, a mitad de realizar esta pr\u00e1ctica, ten\u00eda configurados correctamente los servidores web y el servidor proxy, pero al acceder a la IP de \u00e9ste desde el navegador de mi m\u00e1quina anfitriona, no acced\u00eda al contenido. La manera de proceder para diagnosticar el problema fue el siguiente: Comprobar que existe comunicaci\u00f3n entre los servidores web y el proxy inverso Para ello, podemos utilizar curl y ping desde el proxy: curl 192.168.0.20:8080 curl 192.168.0.21:8080 ping 192.168.0.20 ping 192.168.0.21 En mi caso particular, con ping comprob\u00e9 que exist\u00eda comunicaci\u00f3n entre las m\u00e1quinas, pero curl no devolv\u00eda correctamente el servicio alojado en los puertos de los servidores web. Comprobar que existe una regla de cortafuegos para los puertos :8080 en los servidores web Para ello, podemos utilizar la herramienta ufw : sudo ufw status # Muestra las reglas existentes sudo ufw allow 8080/tcp # Crear la regla si no existe para que se permita la comunicaci\u00f3n por el puerto :8080 En mi caso no exist\u00eda la regla para permitir la comunicaci\u00f3n por los puertos :8080 de los servidores web. Una vez creadas las reglas en cada servidor web, pude terminar la pr\u00e1ctica correctamente. Comprobar las configuraciones de cada servidor Una vez hechas las comprobaciones pertinentes sobre las conexiones de los servidores, si existe alg\u00fan problema, es bastante probable que estos se encuentren en los archivos de configuraci\u00f3n de /etc/nginx/sites-available de alguno de los servidores. Podemos obtener indicaciones valiosas desde Nginx ejecutando: sudo nginx -t Cuestiones finales 1. Busca informaci\u00f3n de qu\u00e9 otros m\u00e9todos de balanceo se pueden aplicar con Nginx y describe al menos 3 de ellos. Otros m\u00e9todos de balanceo que permite Nginx son: least_conn: el proxy enviar\u00e1 las solicitudes entrantes al servidor que tenga un menor n\u00famero de conexiones activas en ese momento, para evitar las eventuales sobrecargas. ip_hash: se asigna cada solicitud a un servidor en funci\u00f3n del hash de la direcci\u00f3n del cliente, de manera que todas las solicitudes de un mismo cliente ser\u00e1n dirigidas siempre al mismo servidor. En caso de que caiga el servidor, se enviar\u00e1 la petici\u00f3n al siguiente servidor en el grupo. least_time: la petici\u00f3n ser\u00e1 enviada al servidor con menor latencia y menor cantidad de conexiones activas, es decir, el que ofrezca un menor tiempo de espera para la respuesta. 2. Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde. Considerando que tuvieramos dos nuevos servidores con configuraciones correctas (contenido correcto y con permisos adecuados en /var/www, archivos de configuraci\u00f3n en /etc/nginx/sites-available correctos y Nginx funcionando correctamente y sin problemas con los permisos del cortafuegos), s\u00f3lo ser\u00eda necesario indicar las IPs y puertos de los servidores en el archivo de configuraci\u00f3n del proxy. Por ejemplo: upstream backend_hosts { server 192.168.0.20:8080; server 192.168.0.21:8080; server 192.168.0.23:8080; # Nuevo servidor server 192.168.0.24:8080; # Nuevo servidor } En caso de error, ser\u00eda necesario realizar las comprobaciones oportunas en los nuevos servidores web (que Nginx funcione correctamente en ellos y que exista conexi\u00f3n estable entre estos y el proxy)","title":"Pr\u00e1ctica 2-4. Balanceo de carga"},{"location":"#practica-2-4-balanceo-de-carga","text":"Para realizar esta tarea es necesario clonar la MV que funciona como servidor web. De esta manera, tendremos dos servidores web y un servidor que funciona como proxy inverso y balanceador de carga. Un recordatorio de las IPs que se est\u00e1n utilizando en cada m\u00e1quina: Anfitriona: 192.168.0.13 Servidor web 1: 192.168.0.20 Servidor web 2: 192.168.0.21 Servidor proxy: 192.168.0.22","title":"Pr\u00e1ctica 2-4. Balanceo de carga"},{"location":"#configuracion-del-primer-servidor-web","text":"Ser\u00e1 necesario cambiar el nombre del directorio que contiene los archivos del servidor web a webserver1. Lo mismo con el archivo de configuraci\u00f3n y con el enlace simb\u00f3lico, en los directorios /etc/nginx/sites-available y /etc/nginx/sites-enabled. Adem\u00e1s, se le a\u00f1ade una cabecera al archivo de configuraci\u00f3n. En mi caso: location /{ add-header Serv_Web1_PerezBernabeuAlberto \"Servidor Web 1\"; } Tambi\u00e9n he modificado el contenido del HTML del servidor, para que muestre: <html> <head> <title> Prueba de balanceo con NGINX</title> </head> <body> <h2>Este es el servidor web 1</h2> </body> </html>","title":"Configuraci\u00f3n del primer servidor web"},{"location":"#configuracion-del-segundo-servidor-web","text":"La configuraci\u00f3n del segundo servidor es la misma que la del primer servidor web, cambiando \"webserver1\" por \"webserver2\" en los lugares que es necesario.","title":"Configuraci\u00f3n del segundo servidor web"},{"location":"#configuracion-del-servidor-proxy-inverso","text":"En el servidor proxy inverso, para configurar el balanceo de carga, modificamos el archivo de configuraci\u00f3n de /etc/nginx/sites-available/ de la siguiente manera: upstream backend_hosts { random; server 192.168.0.20:8080; server 192.168.0.21:8080; } server { listen 80; listen [::]:80; server_name webserver www.webserver.com; location / { proxy_pass http://backend_hosts; # add_header Host proxy_inverso_albertoperez; } } As\u00ed, cuando desde la m\u00e1quina anfitriona busquemos 192.168.0.22:80 (o la IP correspondiente al servidor o el nombre que le hayamos dado desde el archivo /etc/hosts de la anfitriona) recibiremos realmente el contenido de uno de los servidores web, en este caso, aleatoriamente. Podemos observar que en ambos casos, efectivamente, se ha buscado la IP del servidor proxy, pero en un caso se ha devuelto el contenido del servidor web 1 y su cabecera correspondiente y en el otro caso se ha devuelto el contenido del servidor web 2 y su cabecera correspondiente. Si paramos el servicio de Nginx en uno de los servidores web, s\u00f3lo se mostrar\u00e1 el contenido del otro servidor. Lo mismo ocurrir\u00e1 si por una causa ajena uno de los servidores web cae o es inutilizado.","title":"Configuraci\u00f3n del servidor proxy inverso"},{"location":"#apunte-sobre-solucion-de-problemas","text":"Al trabajar con varias m\u00e1quinas al mismo tiempo, hay que tener en cuenta que existen muchos errores que pueden ocurrir y es necesario saber c\u00f3mo diagnosticar qu\u00e9 est\u00e1 fallando cuando no obtememos el resultado que esperamos. En mi caso, a mitad de realizar esta pr\u00e1ctica, ten\u00eda configurados correctamente los servidores web y el servidor proxy, pero al acceder a la IP de \u00e9ste desde el navegador de mi m\u00e1quina anfitriona, no acced\u00eda al contenido. La manera de proceder para diagnosticar el problema fue el siguiente: Comprobar que existe comunicaci\u00f3n entre los servidores web y el proxy inverso Para ello, podemos utilizar curl y ping desde el proxy: curl 192.168.0.20:8080 curl 192.168.0.21:8080 ping 192.168.0.20 ping 192.168.0.21 En mi caso particular, con ping comprob\u00e9 que exist\u00eda comunicaci\u00f3n entre las m\u00e1quinas, pero curl no devolv\u00eda correctamente el servicio alojado en los puertos de los servidores web. Comprobar que existe una regla de cortafuegos para los puertos :8080 en los servidores web Para ello, podemos utilizar la herramienta ufw : sudo ufw status # Muestra las reglas existentes sudo ufw allow 8080/tcp # Crear la regla si no existe para que se permita la comunicaci\u00f3n por el puerto :8080 En mi caso no exist\u00eda la regla para permitir la comunicaci\u00f3n por los puertos :8080 de los servidores web. Una vez creadas las reglas en cada servidor web, pude terminar la pr\u00e1ctica correctamente. Comprobar las configuraciones de cada servidor Una vez hechas las comprobaciones pertinentes sobre las conexiones de los servidores, si existe alg\u00fan problema, es bastante probable que estos se encuentren en los archivos de configuraci\u00f3n de /etc/nginx/sites-available de alguno de los servidores. Podemos obtener indicaciones valiosas desde Nginx ejecutando: sudo nginx -t","title":"Apunte sobre soluci\u00f3n de problemas"},{"location":"#cuestiones-finales","text":"1. Busca informaci\u00f3n de qu\u00e9 otros m\u00e9todos de balanceo se pueden aplicar con Nginx y describe al menos 3 de ellos. Otros m\u00e9todos de balanceo que permite Nginx son: least_conn: el proxy enviar\u00e1 las solicitudes entrantes al servidor que tenga un menor n\u00famero de conexiones activas en ese momento, para evitar las eventuales sobrecargas. ip_hash: se asigna cada solicitud a un servidor en funci\u00f3n del hash de la direcci\u00f3n del cliente, de manera que todas las solicitudes de un mismo cliente ser\u00e1n dirigidas siempre al mismo servidor. En caso de que caiga el servidor, se enviar\u00e1 la petici\u00f3n al siguiente servidor en el grupo. least_time: la petici\u00f3n ser\u00e1 enviada al servidor con menor latencia y menor cantidad de conexiones activas, es decir, el que ofrezca un menor tiempo de espera para la respuesta. 2. Si quiero a\u00f1adir 2 servidores web m\u00e1s al balanceo de carga, describe detalladamente qu\u00e9 configuraci\u00f3n habr\u00eda que a\u00f1adir y d\u00f3nde. Considerando que tuvieramos dos nuevos servidores con configuraciones correctas (contenido correcto y con permisos adecuados en /var/www, archivos de configuraci\u00f3n en /etc/nginx/sites-available correctos y Nginx funcionando correctamente y sin problemas con los permisos del cortafuegos), s\u00f3lo ser\u00eda necesario indicar las IPs y puertos de los servidores en el archivo de configuraci\u00f3n del proxy. Por ejemplo: upstream backend_hosts { server 192.168.0.20:8080; server 192.168.0.21:8080; server 192.168.0.23:8080; # Nuevo servidor server 192.168.0.24:8080; # Nuevo servidor } En caso de error, ser\u00eda necesario realizar las comprobaciones oportunas en los nuevos servidores web (que Nginx funcione correctamente en ellos y que exista conexi\u00f3n estable entre estos y el proxy)","title":"Cuestiones finales"}]}